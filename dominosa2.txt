% Type declarations
#show domino/5.
#const n=5.

column(1..n+1).
row(1..n).
value(0..n-1).

left_of(C1,C2) :- column(C1), column(C2), C2-C1=1.
above_of(R1,R2) :- row(R1), row(R2), R2-R1=1.

same_as(R1,R2) :- row(R1), row(R2), R1=R2.
same_as(C1,C2) :- column(C1), column(C2), C1=C2.

orientation(O,R1,R2,C1,C2) :- same_as(R1,R2), O=h, left_of(C1,C2).
orientation(O,R1,R2,C1,C2) :- same_as(C1,C2), O=v, above_of(R1,R2).

n*(n+1)/2 { domino(R1,C1,V1,V2,O) : tile(R1,C1,V1), tile(R2,C2,V2),  orientation(O,R1,R2,C1,C2) } n*(n+1)/2.

% Effect axioms
%	Evitamos casillas de entrada 'no validas'.
:- tile(R,_,_), not row(R).
:- tile(_,C,_), not column(C).
:- tile(_,_,V), not value(V).
	
% No se puede repetir ficha formada con los mismos valores.
%	Mismas posiciones.
:- domino(R1,C1,V1,V2,O1), domino(R2,C2,V1,V2,O2), R1!=R2.
:- domino(R1,C1,V1,V2,O1), domino(R2,C2,V1,V2,O2), C1!=C2.

%	Diferentes posiciones.
:- domino(R1,C1,V1,V2,O1), domino(R2,C2,V2,V1,O2), V2!=V1.

%:- domino(R1,C1,V,V,O1), domino(R2,C2,V,V,O2), R1!=R2.
%:- domino(R1,C1,V,V,O1), domino(R2,C2,V,V,O2), C1!=C2.

%	Misma casilla no puede formar sus dos fichas posibles a la vez.
:- domino(R,C,_,_,O1), domino(R,C,_,_,O2), O1!=O2.

%	Misma casilla no puede formar ficha y que se forme ficha a partir de ella a la vez.
:- domino(R1,C1,_,_,O1), domino(R2,C2,_,_,O2), R1=R2, C1+1=C2, O1=h. %, O2=v.

:- domino(R1,C1,_,_,O1), domino(R2,C2,_,_,O2), R1+1=R2, C1=C2, O1=v. %, O2=h.

:- domino(R1,C1,_,_,O1), domino(R2,C2,_,_,O2), R1=R2+1, C1+1=C2, O1=h, O2=v.

tile(1,1,1).
tile(1,2,4).
tile(1,3,2).
tile(1,4,4).
tile(1,5,2).
tile(1,6,1).
tile(2,1,4).
tile(2,2,3).
tile(2,3,2).
tile(2,4,0).
tile(2,5,0).
tile(2,6,0).
tile(3,1,4).
tile(3,2,1).
tile(3,3,2).
tile(3,4,3).
tile(3,5,3).
tile(3,6,3).
tile(4,1,2).
tile(4,2,1).
tile(4,3,4).
tile(4,4,0).
tile(4,5,3).
tile(4,6,4).
tile(5,1,0).
tile(5,2,1).
tile(5,3,2).
tile(5,4,0).
tile(5,5,1).
tile(5,6,3).